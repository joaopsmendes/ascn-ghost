---

- name: Create GCP address
  google.cloud.gcp_compute_address:
   name: ghost-address
   region: us-central1
   project: "{{ gcp_project }}"
   auth_kind: "{{ gcp_auth_kind }}"
   service_account_file: "{{ gcp_cred_file }}"
   state: present
  register: ghost_address

- name: debug
  ansible.builtin.debug:
   msg: "http://{{ ghost_address.address }}"

- name: Create ghost directory
  ansible.builtin.file:
    path: ghost
    state: directory

- name: copy file from templates to ghost
  ansible.builtin.copy:
    src: "templates/{{ item }}"
    dest: ghost/
  with_items:
    - ghost-deployment.yml
    - ghost-service.yml

# - name: get mail user
#   ansible.builtin.shell: grep user -A 1 inventory/mail_credentials.txt | tail -n 1  
#   register: mailUser

# - name: get mail password
#   ansible.builtin.shell: grep pass -A 1  inventory/mail_credentials.txt | tail -n 1  
#   register: mailPassword


- name: debug vault
  ansible.builtin.debug:
    msg: "{{ mail_user }}"

- name: Replace Mail user
  ansible.builtin.replace:
    path: ghost/ghost-deployment.yml
    regexp: 'value: <mail_user>'
    replace: "value: {{ mail_user }}"

- name: Replace Mail password
  ansible.builtin.replace:
    path: ghost/ghost-deployment.yml
    regexp: 'value: <mail_password>'
    replace: "value: {{ mail_pass }}"

- name: Replace port number
  ansible.builtin.replace:
    path: ghost/{{ item }}
    regexp: '<port>'
    replace: "{{ ghost_port }}"
  with_items: 
    - ghost-deployment.yml
    - ghost-service.yml

- name: update ghost port variable
  ansible.builtin.set_fact:
    ghost_port: 2368

- name: update ghost ip variable
  ansible.builtin.set_fact:
    ghost_ip: "{{ ghost_address.address }}"

- name: Replace ghost-service.yml
  ansible.builtin.replace:
    path: ghost/ghost-service.yml
    regexp: 'loadBalancerIP:.*'
    replace: "loadBalancerIP: {{ ghost_address.address }}"

- name: Replace ghost-deployment.yml
  ansible.builtin.replace:
    path: ghost/ghost-deployment.yml
    regexp: 'value: <IP>'
    replace: "value: http://{{ ghost_address.address }}:2368"


- name: Create a k8s namespace
  kubernetes.core.k8s:
    name: ghost
    api_version: v1
    kind: Namespace
    state: present


- name: Create Persistent Volume
  kubernetes.core.k8s:
    state: present
    src: mysql/persistent-volume.yml
    namespace: ghost

- name: MySQL Deployment
  kubernetes.core.k8s:
    state: present
    src: mysql/mysql-deployment.yml
    namespace: ghost

- name: Persistent Volume Claim
  kubernetes.core.k8s:
    state: present
    src: mysql/mysql-pvc.yml
    namespace: ghost

- name: MySQL Service
  kubernetes.core.k8s:
    state: present
    src: mysql/mysql-service.yml 
    namespace: ghost 

- name: Search for all Pods labelled app=web
  kubernetes.core.k8s_info:
    kind: Pod
    label_selectors:
      - app = mysql
  register: mysql_pod

- name: Debug Mysql Pod
  ansible.builtin.debug:
    msg: "{{ mysql_pod.resources[0].metadata.name }}"

# - name: Get Mysql Pod Name
#   ansible.builtin.shell: kubectl get pods -l app=mysql -o jsonpath='{.items[0].metadata.name}'
#   register: mysql_pod_name

# - name: Debug Mysql Pod Name
#   ansible.builtin.debug:
#     msg: "{{ mysql_pod_name.stdout }}"


- name: Calculate Hash da password with python
  ansible.builtin.shell: python3 -c 'import bcrypt; print(bcrypt.hashpw(b"{{ admin_pass }}", bcrypt.gensalt(rounds=10)).decode("ascii"))'
  register: hash_pass

- name: Replace $ with \$ in hash_pass
  ansible.builtin.shell: python3 -c 'x="{{ hash_pass.stdout }}".replace("$","\$");print(x)'
  register: hash_pass

- name: Debug Hash da password
  ansible.builtin.debug:
    msg: "{{ hash_pass.stdout }}"


- name: Ghost Deployment
  kubernetes.core.k8s:
    state: present
    src: ghost/ghost-deployment.yml
    namespace: ghost


- name: Ghost Service
  kubernetes.core.k8s:
    state: present
    src: ghost/ghost-service.yml
    namespace: ghost


# - name: Wait for ghost service to be ready
#   kubernetes.core.k8s:
#     wait: yes
#     wait_timeout: 600
#     wait_condition:
#       type: Service
#       status: "True"
#       reason: Ready


- name: Wait for mysql service to be ready
  kubernetes.core.k8s_info:
    kind: Pod
    label_selectors:
      - app = mysql
  register: mysql_pod
  until: mysql_pod.resources[0].status.phase == "Running"
  retries: 10


- name: Wait for ghost service to be ready
  kubernetes.core.k8s_info:
    kind: Pod
    label_selectors:
      - app = ghost
  register: ghost_pod
  until: ghost_pod.resources[0].status.phase == "Running"
  retries: 10

- name: debug ghost pod
  ansible.builtin.debug:
    msg: "{{ ghost_pod.resources[0].metadata.name }}"

- name: Execute a command
  kubernetes.core.k8s_exec:
    namespace: ghost
    pod: "{{ mysql_pod.resources[0].metadata.name}}"
    container: mysql
    command: mysql -u'ghostuser' -p'password' -e "use ghost;select * from users;"
  register: result
  until : result.stdout != ""
  retries: 10

- name: Debug result
  ansible.builtin.debug:
    msg: "{{ result.stdout }}"

# - name: Wait for app pod to be ready
#   ansible.builtin.shell: kubectl wait --for=condition=Ready pods --selector tier=application --timeout=600s

# - name: Wait for database pod to be ready
#   ansible.builtin.shell: kubectl wait --for=condition=Ready pods --selector tier=database --timeout=600s

# - name: Select users from database
#   ansible.builtin.shell: kubectl exec {{ mysql_pod_name.stdout }} -- mysql -u'ghostuser' -p'password' -e "use ghost;select * from users;"
#   register: mysql_user
#   until: mysql_user.stdout != ""
#   retries: 10

# - name: Debug mysql_user
#   ansible.builtin.debug:
#     msg: "{{ mysql_user.stdout }}"

- name: Execute a command
  kubernetes.core.k8s_exec:
    namespace: ghost
    pod: "{{ mysql_pod.resources[0].metadata.name }}"
    container: mysql
    command: mysql -u'ghostuser' -p'password' -e "use ghost;update users set name='{{ admin_name }}', password='{{ hash_pass.stdout }}', email='{{ admin_email }}', status='active' where id=1;"

# - name: Add an user to database
#   ansible.builtin.shell: kubectl exec {{ mysql_pod_name.stdout }} -- mysql -u'ghostuser' -p'password' -e "use ghost;update users set name='{{ admin_name }}', password='{{ hash_pass.stdout }}', email='{{ admin_email }}', status='active' where id=1;"
#   register: mysql_user



- name: Wait for the host to be reachable
  wait_for:
    host: "{{ ghost_ip }}"
    port: "{{ ghost_port }}"
    timeout: 600